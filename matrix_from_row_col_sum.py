"""
The solution is an iterative implementation for the DEPRECATED_RECURSIVE_SOLUTION.
Essentially DFS, choose a value for the first cell, then the second, etc.
Check if the resulting matrix solves the problem.
Otherwise try another value for the current node.
          if all values are exhausted, backtrack.
One change is that all but the last cell gets values [k, k//2, k//4] etc to speedup search.
I'm not so sure if this will always find a solution when it exists, but experimentally it seems to be the case.
"""

class CellValues:
    def __init__(self, i, j, rowSum, colSum):
        k = min(rowSum[i], colSum[j])
        if i < len(rowSum) and j < len(colSum):
            self.L = [k]
            while k != 0:
                k = k//2
                self.L.append(k)
        else:
            self.L = list(range(k, -1, -1))
        self.i = 0

    def lower(self):
        pass

    def higher(self):
        pass

    def get(self):
        if self.i < len(self.L):
            v = self.L[self.i]
            self.i += 1
        else:
            v = None
        return v

    def hasOne(self):
        return self.i < len(self.L)

    def peek(self):
        v = self.L[self.i + 1] if self.i < len(self.L) - 1 else None
        return v

class Solution:
    def restoreMatrix(self, rowSum, colSum):
        mat = [[0 for _ in colSum] for _ in rowSum]
        do_change = [[True for _ in colSum] for _ in rowSum]
        cell_values = [[None for _ in colSum] for _ in rowSum]
        cell_values[0][0] = CellValues(0, 0, rowSum, colSum)
        while cell_values[0][0].hasOne():
            for i in range(len(rowSum)):
                for j in range(len(colSum)):
                    if do_change[i][j]:
                        do_change[i][j] = i == len(rowSum) - 1 and j == len(colSum) - 1 # last cell always changes
                        if cell_values[i][j] is None:
                            cell_values[i][j] = CellValues(i, j, rowSum, colSum)
                        while cell_values[i][j].hasOne():
                            cell_value = cell_values[i][j].get()
                            if cell_value <= rowSum[i] and cell_value <= colSum[j]:
                                # undo previous operation
                                rowSum[i] += mat[i][j]
                                colSum[j] += mat[i][j]
                                # apply new cell values
                                mat[i][j] = cell_value
                                rowSum[i] -= cell_value
                                colSum[j] -= cell_value
                                break
                        else:
                            cell_values[i][j] = None
                            if i != 0 or j != 0:
                                prev_i, prev_j = (i-1, len(colSum)-1) if j == 0 else (i, j-1)
                                do_change[prev_i][prev_j] = False
            if sum(rowSum) == 0 and sum(colSum) == 0:
                return mat
        raise Exception("Solution not found")

    def DEPRECATED_RECURSIVE_SOLUTION(self, mat, i, j, rowSum, colSum):
        if i == len(rowSum):
            return mat if sum(rowSum) == 0 and sum(colSum) == 0 else None

        new_j = (j+1)%len(colSum)
        new_i = i + 1 if new_j == 0 else i

        k = min(rowSum[i], colSum[j])
        for cell_value in range(k, -1, -1):
            mat[i][j] = cell_value
            i_row_sum = rowSum[i] - cell_value
            j_col_sum = colSum[j] - cell_value
            if i_row_sum >= 0 and j_col_sum >= 0:
                newRowSum, newColSum = rowSum[:], colSum[:]
                newRowSum[i], newColSum[j] = i_row_sum, j_col_sum
                new_mat = self.getMatrix(mat, new_i, new_j, newRowSum, newColSum)
                if new_mat is not None:
                    return new_mat

if __name__ == "__main__":
    solution = Solution()

    row_col_sums = [
        ([0], [0]),
        ([1], [1]),
        ([1, 0], [1]),
        ([14, 9], [6, 9, 8]),
        ([5, 7, 10], [8, 6, 8]),
        ([22,23,45,35,38,23,16,28,30], [3,21,184,26,13,12,1]),
        ([374254,681689,345930,867673,197097,675722,571676,996665,71691,174047,639594,727043,782174,15136,211304,924152,516118,291330,133390,151018,740008,744286,772683,892965,192681,785309,774871,325591,655022,167800,997117,305720,17137,345202,219848,867788,156451,146318,142032,72083,718905,654128,614313,287261,741032,898376,725301,643700,321643,676283,844636,345498,378823,599739,106541,391073,443644,990136,976117,680173,990867,398277,822133,253833,925777,841646,207884,381991,879361,587881,216349,395156,372096,137307,533174,150485,918995,977530,427796,530573,675741,405648,598410,239845,507566,249766,708018,9863,857577,848683,460321,952205,700579,226030,794832,827274,680216,614810,125666,708008,668290,937842,355781,169042,973320,402212,984148,593919,404116,280267,235715,1789,638748,509122,572754,639363,139007,673608,135335,283006,664281,766888,851441,609699,218382,925749,157997,283005,245248,128457,790176,388723,243709,452157,806550,238809,875346,367063,670959,467105,560250,426204,304278,585243,800927,242707,527948,276237,669629,234923,187294,746019,514167,906161,846187,815077,495552,894302,764234,970258,944719,584440,954818,73297,165837,868092,118189,662130,502206,695176,316420,851712,828436,242691,868631,496335,131320,986856,692865,261955,548883,386838,609183,366792,8949,513444,65048,671530,790216,682708,630993,217524,320435,738557,793748,586089,895733,156427,643408,268107,113013,755235,109645,939035,419457,898954,911605,298288,431618,644969,589863,850168,201708,268007,473156,529655,578154,21770,279546,814147,542924,269531,50685,324512,120929,178122,711715,220658,21237,333979,585344,620936,903082,772758,925307,375290,658018,438117,630933,665122,987494,465283,631790,2959,203195,175356,101913,702159,729391,635824,673902,476058,719403,271418,624406,861877,662198,190870,385254,912279,345392,852921,150071,183405,211818,21288,282567,431537,182714,432091,796458,48953,610932,341614,572529,13903,932006,335130,918445,66599,935304,109138,433489,135492,128028,772828,557710,436154,175061,431006,740096,392499,459582,929081,740922,65138,986471,925776,397353,735582,281650,407635,105433,331629,13591,678033,899881,934528,446618,913541,664083,982860,947043,855135,996821,311115,910938,108566,196027,342922,480969,3952,351381,866674,769593,820799,4265,358178,361258,531692,953968,789530,185058,601629,966366,264868,619867,534404,599431,75351,4583628,588727,138993,139644,178348,736176,270824,950502,980523,192808,44573,238836,568349,806566,889448,925932,95034,867335,448018,473074,565944,309399,92087,17242,854080,713759,549217,93802,648866,693792,65344,600347,994345,440239,308630,168293,796637,774726,754716,277125,138017,57006,689272,305383,418,823826,342603,122079,977213,467904,152588,208099,853620,562113,297515,375349,544817,680817,766176,612481,61122,714220,771580,575230,315140,213911,429981,187742,880574,614539,393162,31569,460447,661823,177615,568461,662949,46695,932597,737780,809901,636450,472303,248913,487650,240628,696707,38409,518160,846836,61830,627188,699951,849410,672459,502791,843039,445517,233226,278093,898756,982664,412854,462070,532478,100606,705484,889374,429397,811720,440682,861749,671393,529155,373513,389678,341950,57079,731861,825879,649760,218858,633004,132548,850417,741389,692450,716028,532105,187373,153710,205150,464654,699742,180280,890400,140420,953471,203518,80964,455794,97656,49402,244162,725628,969678,392665,746720,811364,642655,448642,954383,319631,70969,512801,826958,747569,516198,371741,43912],[339000,863291,89894,515329,639684,106426,220955,782929,721360,958096,376488,877028,984451,882109,98282,354875,904875,524681,691588,243289,638145,672348,390347,590619,379697,397811,493828,721398,280577,76227,497013,622833,996928,912444,750542,444158,935798,632721,438136,313489,212244,819112,457443,520932,506199,364490,729171,276421,540244,963533,833936,36640,24981,381647,390835,233496,943971,648782,104387,196933,501865,434705,808613,781130,654313,811818,845597,403628,834159,693694,560069,933710,281240,297225,353126,996329,270621,774680,841083,574834,243480,901974,65576,107545,554280,732652,601430,244873,142614,299979,542978,989530,184833,208739,572499,556618,307187,589517,138943,343253,421532,177640,714337,538208,31968,10348,315304,173547,599839,795010,707941,794696,749268,349128,709624,245432,610596,459977,890096,982789,501290,16679,408649,500610,439977,304677,467242,634433,55841,448835,282548,392542,342516,467959,311916,169577,586357,735009,902016,792888,321585,632048,522017,320021,491967,133830,445221,921365,803197,648123,363150,974369,883659,303194,399111,108567,928119,397444,877557,313056,38992,783608,734920,313609,575659,445724,836191,631437,103545,519895,93405,571185,682887,31625,615415,300962,192510,251106,13682,660154,42498,692932,191566,949855,356500,863040,86835,765623,393513,146118,103518,443593,82229,881113,293857,348734,987061,396919,908114,367477,841779,289867,525256,939307,588475,164748,926873,240479,158762,877501,505922,764012,261953,401278,485493,527786,753124,608641,974340,70904,931637,436044,455712,84609,626857,215076,429829,287006,31930,365165,233543,118751,220695,756834,450888,720073,203137,352992,671062,627175,309291,834934,348290,104414,675289,367915,148907,638094,505123,985942,53615,70851,937631,514720,113277,791186,31729,700537,594298,231203,960362,592259,995031,156016,8359,933258,981935,902180,17208,902070,236106,798623,455306,636965,302528,878657,162418,547360,856269,110399,879289,743687,534253,988510,405974,274476,351547,166906,197633,970392,530575,598401,777268,945212,63638,474394,535896,216438,867443,789301,299843,569332,644279,843416,93819,885955,839435,296127,957725,107272,918002,324958,478689,984958,50857,463606,919453,522569,667816,906984,962287,554754,602565,311632,838521,179979,563777,876379,181943,864609,729217,425611,647404,705030,349426,607380,875713,303256,702831,260966,412782,853033,797903,357733,220461,14925,554719,720107,997012,131537,12208,450791,742915,340292,167130,547542,670872,450115,35756,199543,708000,146733,650157,497124,464400,902063,166751,196565,763268,320828,733596,439525,470575,565164,898414,133005,210181,462000,454129,540701,177684,970085,386274,367833,889104,984824,905848,704097,163864,659393,330604,624760,492486,577373,905989,310456,792720,849194,508580,46116,747567,664985,692144,974269,534021,69145,719092,991863,504658,222384,411844,503519,220815,822122,761269,779034,237975,433194,700821,422057,185854,891329,672683,667788,307186,119447,253020,138064,112710,461734,14379,40112,526395,339095,997090,202470,797665,514594,530680,40921,69890,581055,693694,912385,412881,817039,380886,54537,147489,617129,444661,555537,233913,249395,163276,941224,767688,490022,690930,124070,889928,360323,969779,742649,353211,659668,683296,858199,920411,600806,855781,861049,234835,925717,981518,453142,346204,137826,862159,862580,805001,727961,975454,400748,781326,148971,598892,528057,460707,368760,297281,744425,842592,801099,944430,589615,345420,376684,907659,239640]),
    ]
    for row_sums, col_sums in row_col_sums:
        mat = solution.restoreMatrix(row_sums[:], col_sums[:])
        for row, row_sum in zip(mat, row_sums):
            assert sum(row) == row_sum, (row_sums, col_sums, mat)
        for i, col_sum in enumerate(col_sums):
            s = 0
            for row in mat:
                s += row[i]
            assert s == col_sum, (row_sums, col_sums, mat)

